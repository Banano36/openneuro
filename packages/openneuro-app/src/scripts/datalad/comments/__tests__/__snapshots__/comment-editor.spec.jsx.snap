// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommentEditor component renders with default props 1`] = `
<CommentEditor>
  <div
    className="RichEditor-root"
  >
    <BlockStyleControls
      editorState={
        EditorState {
          "_immutable": Immutable.Record {
            "allowUndo": true,
            "currentContent": Immutable.Record {
              "entityMap": Object {
                "__add": [Function],
                "__create": [Function],
                "__get": [Function],
                "__getLastCreatedEntityKey": [Function],
                "__mergeData": [Function],
                "__replaceData": [Function],
                "add": [Function],
                "create": [Function],
                "get": [Function],
                "getLastCreatedEntityKey": [Function],
                "mergeData": [Function],
                "replaceData": [Function],
              },
              "blockMap": Immutable.OrderedMap {
                "a6ase": Immutable.Record {
                  "key": "a6ase",
                  "type": "unstyled",
                  "text": "",
                  "characterList": Immutable.List [],
                  "depth": 0,
                  "data": Immutable.Map {},
                },
              },
              "selectionBefore": Immutable.Record {
                "anchorKey": "a6ase",
                "anchorOffset": 0,
                "focusKey": "a6ase",
                "focusOffset": 0,
                "isBackward": false,
                "hasFocus": false,
              },
              "selectionAfter": Immutable.Record {
                "anchorKey": "a6ase",
                "anchorOffset": 0,
                "focusKey": "a6ase",
                "focusOffset": 0,
                "isBackward": false,
                "hasFocus": false,
              },
            },
            "decorator": null,
            "directionMap": Immutable.OrderedMap {
              "a6ase": "LTR",
            },
            "forceSelection": false,
            "inCompositionMode": false,
            "inlineStyleOverride": null,
            "lastChangeType": null,
            "nativelyRenderedContent": null,
            "redoStack": Immutable.Stack [],
            "selection": Immutable.Record {
              "anchorKey": "a6ase",
              "anchorOffset": 0,
              "focusKey": "a6ase",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "treeMap": Immutable.OrderedMap {
              "a6ase": Immutable.List [
                Immutable.Record {
                  "start": 0,
                  "end": 0,
                  "decoratorKey": null,
                  "leaves": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 0,
                    },
                  ],
                },
              ],
            },
            "undoStack": Immutable.Stack [],
          },
        }
      }
      onToggle={[Function]}
    >
      <div
        className="RichEditor-controls"
      >
        <StyleButton
          active={false}
          key="H1"
          label="H1"
          onToggle={[Function]}
          style="header-one"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H1
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="H2"
          label="H2"
          onToggle={[Function]}
          style="header-two"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H2
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="H3"
          label="H3"
          onToggle={[Function]}
          style="header-three"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H3
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="H4"
          label="H4"
          onToggle={[Function]}
          style="header-four"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H4
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="H5"
          label="H5"
          onToggle={[Function]}
          style="header-five"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H5
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="H6"
          label="H6"
          onToggle={[Function]}
          style="header-six"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            H6
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="Blockquote"
          label="Blockquote"
          onToggle={[Function]}
          style="blockquote"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Blockquote
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="UL"
          label="UL"
          onToggle={[Function]}
          style="unordered-list-item"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            UL
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="OL"
          label="OL"
          onToggle={[Function]}
          style="ordered-list-item"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            OL
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="Code Block"
          label="Code Block"
          onToggle={[Function]}
          style="code-block"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Code Block
          </span>
        </StyleButton>
      </div>
    </BlockStyleControls>
    <InlineStyleControls
      editorState={
        EditorState {
          "_immutable": Immutable.Record {
            "allowUndo": true,
            "currentContent": Immutable.Record {
              "entityMap": Object {
                "__add": [Function],
                "__create": [Function],
                "__get": [Function],
                "__getLastCreatedEntityKey": [Function],
                "__mergeData": [Function],
                "__replaceData": [Function],
                "add": [Function],
                "create": [Function],
                "get": [Function],
                "getLastCreatedEntityKey": [Function],
                "mergeData": [Function],
                "replaceData": [Function],
              },
              "blockMap": Immutable.OrderedMap {
                "a6ase": Immutable.Record {
                  "key": "a6ase",
                  "type": "unstyled",
                  "text": "",
                  "characterList": Immutable.List [],
                  "depth": 0,
                  "data": Immutable.Map {},
                },
              },
              "selectionBefore": Immutable.Record {
                "anchorKey": "a6ase",
                "anchorOffset": 0,
                "focusKey": "a6ase",
                "focusOffset": 0,
                "isBackward": false,
                "hasFocus": false,
              },
              "selectionAfter": Immutable.Record {
                "anchorKey": "a6ase",
                "anchorOffset": 0,
                "focusKey": "a6ase",
                "focusOffset": 0,
                "isBackward": false,
                "hasFocus": false,
              },
            },
            "decorator": null,
            "directionMap": Immutable.OrderedMap {
              "a6ase": "LTR",
            },
            "forceSelection": false,
            "inCompositionMode": false,
            "inlineStyleOverride": null,
            "lastChangeType": null,
            "nativelyRenderedContent": null,
            "redoStack": Immutable.Stack [],
            "selection": Immutable.Record {
              "anchorKey": "a6ase",
              "anchorOffset": 0,
              "focusKey": "a6ase",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "treeMap": Immutable.OrderedMap {
              "a6ase": Immutable.List [
                Immutable.Record {
                  "start": 0,
                  "end": 0,
                  "decoratorKey": null,
                  "leaves": Immutable.List [
                    Immutable.Record {
                      "start": 0,
                      "end": 0,
                    },
                  ],
                },
              ],
            },
            "undoStack": Immutable.Stack [],
          },
        }
      }
      onToggle={[Function]}
    >
      <div
        className="RichEditor-controls"
      >
        <StyleButton
          active={false}
          key="Bold"
          label="Bold"
          onToggle={[Function]}
          style="BOLD"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Bold
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="Italic"
          label="Italic"
          onToggle={[Function]}
          style="ITALIC"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Italic
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="Underline"
          label="Underline"
          onToggle={[Function]}
          style="UNDERLINE"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Underline
          </span>
        </StyleButton>
        <StyleButton
          active={false}
          key="Monospace"
          label="Monospace"
          onToggle={[Function]}
          style="CODE"
        >
          <span
            className="RichEditor-styleButton"
            onMouseDown={[Function]}
          >
            Monospace
          </span>
        </StyleButton>
      </div>
    </InlineStyleControls>
    <div
      className="RichEditor-editor"
    >
      <DraftEditor
        blockRenderMap={
          Immutable.Map {
            "ordered-list-item": Object {
              "element": "li",
              "wrapper": <ol
                className="public-DraftStyleDefault-ol"
              />,
            },
            "header-six": Object {
              "element": "h6",
            },
            "header-four": Object {
              "element": "h4",
            },
            "header-one": Object {
              "element": "h1",
            },
            "unordered-list-item": Object {
              "element": "li",
              "wrapper": <ul
                className="public-DraftStyleDefault-ul"
              />,
            },
            "atomic": Object {
              "element": "figure",
            },
            "unstyled": Object {
              "aliasedElements": Array [
                "p",
              ],
              "element": "div",
            },
            "header-two": Object {
              "element": "h2",
            },
            "code-block": Object {
              "element": "pre",
              "wrapper": <pre
                className="public-DraftStyleDefault-pre"
              />,
            },
            "blockquote": Object {
              "element": "blockquote",
            },
            "header-five": Object {
              "element": "h5",
            },
            "header-three": Object {
              "element": "h3",
            },
          }
        }
        blockRendererFn={[Function]}
        blockStyleFn={[Function]}
        editorKey={null}
        editorState={
          EditorState {
            "_immutable": Immutable.Record {
              "allowUndo": true,
              "currentContent": Immutable.Record {
                "entityMap": Object {
                  "__add": [Function],
                  "__create": [Function],
                  "__get": [Function],
                  "__getLastCreatedEntityKey": [Function],
                  "__mergeData": [Function],
                  "__replaceData": [Function],
                  "add": [Function],
                  "create": [Function],
                  "get": [Function],
                  "getLastCreatedEntityKey": [Function],
                  "mergeData": [Function],
                  "replaceData": [Function],
                },
                "blockMap": Immutable.OrderedMap {
                  "a6ase": Immutable.Record {
                    "key": "a6ase",
                    "type": "unstyled",
                    "text": "",
                    "characterList": Immutable.List [],
                    "depth": 0,
                    "data": Immutable.Map {},
                  },
                },
                "selectionBefore": Immutable.Record {
                  "anchorKey": "a6ase",
                  "anchorOffset": 0,
                  "focusKey": "a6ase",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
                "selectionAfter": Immutable.Record {
                  "anchorKey": "a6ase",
                  "anchorOffset": 0,
                  "focusKey": "a6ase",
                  "focusOffset": 0,
                  "isBackward": false,
                  "hasFocus": false,
                },
              },
              "decorator": null,
              "directionMap": Immutable.OrderedMap {
                "a6ase": "LTR",
              },
              "forceSelection": false,
              "inCompositionMode": false,
              "inlineStyleOverride": null,
              "lastChangeType": null,
              "nativelyRenderedContent": null,
              "redoStack": Immutable.Stack [],
              "selection": Immutable.Record {
                "anchorKey": "a6ase",
                "anchorOffset": 0,
                "focusKey": "a6ase",
                "focusOffset": 0,
                "isBackward": false,
                "hasFocus": false,
              },
              "treeMap": Immutable.OrderedMap {
                "a6ase": Immutable.List [
                  Immutable.Record {
                    "start": 0,
                    "end": 0,
                    "decoratorKey": null,
                    "leaves": Immutable.List [
                      Immutable.Record {
                        "start": 0,
                        "end": 0,
                      },
                    ],
                  },
                ],
              },
              "undoStack": Immutable.Stack [],
            },
          }
        }
        keyBindingFn={[Function]}
        onChange={[Function]}
        placeholder="Type your comment here..."
        readOnly={false}
        spellCheck={true}
        stripPastedStyles={false}
      >
        <div
          className="DraftEditor-root"
        >
          <DraftEditorPlaceholder
            accessibilityID="placeholder-70k8e"
            editorState={
              EditorState {
                "_immutable": Immutable.Record {
                  "allowUndo": true,
                  "currentContent": Immutable.Record {
                    "entityMap": Object {
                      "__add": [Function],
                      "__create": [Function],
                      "__get": [Function],
                      "__getLastCreatedEntityKey": [Function],
                      "__mergeData": [Function],
                      "__replaceData": [Function],
                      "add": [Function],
                      "create": [Function],
                      "get": [Function],
                      "getLastCreatedEntityKey": [Function],
                      "mergeData": [Function],
                      "replaceData": [Function],
                    },
                    "blockMap": Immutable.OrderedMap {
                      "a6ase": Immutable.Record {
                        "key": "a6ase",
                        "type": "unstyled",
                        "text": "",
                        "characterList": Immutable.List [],
                        "depth": 0,
                        "data": Immutable.Map {},
                      },
                    },
                    "selectionBefore": Immutable.Record {
                      "anchorKey": "a6ase",
                      "anchorOffset": 0,
                      "focusKey": "a6ase",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                    "selectionAfter": Immutable.Record {
                      "anchorKey": "a6ase",
                      "anchorOffset": 0,
                      "focusKey": "a6ase",
                      "focusOffset": 0,
                      "isBackward": false,
                      "hasFocus": false,
                    },
                  },
                  "decorator": null,
                  "directionMap": Immutable.OrderedMap {
                    "a6ase": "LTR",
                  },
                  "forceSelection": false,
                  "inCompositionMode": false,
                  "inlineStyleOverride": null,
                  "lastChangeType": null,
                  "nativelyRenderedContent": null,
                  "redoStack": Immutable.Stack [],
                  "selection": Immutable.Record {
                    "anchorKey": "a6ase",
                    "anchorOffset": 0,
                    "focusKey": "a6ase",
                    "focusOffset": 0,
                    "isBackward": false,
                    "hasFocus": false,
                  },
                  "treeMap": Immutable.OrderedMap {
                    "a6ase": Immutable.List [
                      Immutable.Record {
                        "start": 0,
                        "end": 0,
                        "decoratorKey": null,
                        "leaves": Immutable.List [
                          Immutable.Record {
                            "start": 0,
                            "end": 0,
                          },
                        ],
                      },
                    ],
                  },
                  "undoStack": Immutable.Stack [],
                },
              }
            }
            text="Type your comment here..."
          >
            <div
              className="public-DraftEditorPlaceholder-root"
            >
              <div
                className="public-DraftEditorPlaceholder-inner"
                id="placeholder-70k8e"
                style={
                  Object {
                    "whiteSpace": "pre-wrap",
                  }
                }
              >
                Type your comment here...
              </div>
            </div>
          </DraftEditorPlaceholder>
          <div
            className="DraftEditor-editorContainer"
          >
            <div
              aria-describedby="placeholder-70k8e"
              aria-expanded={null}
              className="notranslate public-DraftEditor-content"
              contentEditable={true}
              onBeforeInput={[Function]}
              onBlur={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onCopy={[Function]}
              onCut={[Function]}
              onDragEnd={[Function]}
              onDragEnter={[Function]}
              onDragLeave={[Function]}
              onDragOver={[Function]}
              onDragStart={[Function]}
              onDrop={[Function]}
              onFocus={[Function]}
              onInput={[Function]}
              onKeyDown={[Function]}
              onKeyPress={[Function]}
              onKeyUp={[Function]}
              onMouseUp={[Function]}
              onPaste={[Function]}
              onSelect={[Function]}
              role="textbox"
              spellCheck={true}
              style={
                Object {
                  "WebkitUserSelect": "text",
                  "outline": "none",
                  "userSelect": "text",
                  "whiteSpace": "pre-wrap",
                  "wordWrap": "break-word",
                }
              }
              suppressContentEditableWarning={true}
            >
              <DraftEditorContents
                blockRenderMap={
                  Immutable.Map {
                    "ordered-list-item": Object {
                      "element": "li",
                      "wrapper": <ol
                        className="public-DraftStyleDefault-ol"
                      />,
                    },
                    "header-six": Object {
                      "element": "h6",
                    },
                    "header-four": Object {
                      "element": "h4",
                    },
                    "header-one": Object {
                      "element": "h1",
                    },
                    "unordered-list-item": Object {
                      "element": "li",
                      "wrapper": <ul
                        className="public-DraftStyleDefault-ul"
                      />,
                    },
                    "atomic": Object {
                      "element": "figure",
                    },
                    "unstyled": Object {
                      "aliasedElements": Array [
                        "p",
                      ],
                      "element": "div",
                    },
                    "header-two": Object {
                      "element": "h2",
                    },
                    "code-block": Object {
                      "element": "pre",
                      "wrapper": <pre
                        className="public-DraftStyleDefault-pre"
                      />,
                    },
                    "blockquote": Object {
                      "element": "blockquote",
                    },
                    "header-five": Object {
                      "element": "h5",
                    },
                    "header-three": Object {
                      "element": "h3",
                    },
                  }
                }
                blockRendererFn={[Function]}
                blockStyleFn={[Function]}
                customStyleMap={
                  Object {
                    "BOLD": Object {
                      "fontWeight": "bold",
                    },
                    "CODE": Object {
                      "fontFamily": "monospace",
                      "wordWrap": "break-word",
                    },
                    "ITALIC": Object {
                      "fontStyle": "italic",
                    },
                    "STRIKETHROUGH": Object {
                      "textDecoration": "line-through",
                    },
                    "UNDERLINE": Object {
                      "textDecoration": "underline",
                    },
                  }
                }
                editorKey="70k8e"
                editorState={
                  EditorState {
                    "_immutable": Immutable.Record {
                      "allowUndo": true,
                      "currentContent": Immutable.Record {
                        "entityMap": Object {
                          "__add": [Function],
                          "__create": [Function],
                          "__get": [Function],
                          "__getLastCreatedEntityKey": [Function],
                          "__mergeData": [Function],
                          "__replaceData": [Function],
                          "add": [Function],
                          "create": [Function],
                          "get": [Function],
                          "getLastCreatedEntityKey": [Function],
                          "mergeData": [Function],
                          "replaceData": [Function],
                        },
                        "blockMap": Immutable.OrderedMap {
                          "a6ase": Immutable.Record {
                            "key": "a6ase",
                            "type": "unstyled",
                            "text": "",
                            "characterList": Immutable.List [],
                            "depth": 0,
                            "data": Immutable.Map {},
                          },
                        },
                        "selectionBefore": Immutable.Record {
                          "anchorKey": "a6ase",
                          "anchorOffset": 0,
                          "focusKey": "a6ase",
                          "focusOffset": 0,
                          "isBackward": false,
                          "hasFocus": false,
                        },
                        "selectionAfter": Immutable.Record {
                          "anchorKey": "a6ase",
                          "anchorOffset": 0,
                          "focusKey": "a6ase",
                          "focusOffset": 0,
                          "isBackward": false,
                          "hasFocus": false,
                        },
                      },
                      "decorator": null,
                      "directionMap": Immutable.OrderedMap {
                        "a6ase": "LTR",
                      },
                      "forceSelection": false,
                      "inCompositionMode": false,
                      "inlineStyleOverride": null,
                      "lastChangeType": null,
                      "nativelyRenderedContent": null,
                      "redoStack": Immutable.Stack [],
                      "selection": Immutable.Record {
                        "anchorKey": "a6ase",
                        "anchorOffset": 0,
                        "focusKey": "a6ase",
                        "focusOffset": 0,
                        "isBackward": false,
                        "hasFocus": false,
                      },
                      "treeMap": Immutable.OrderedMap {
                        "a6ase": Immutable.List [
                          Immutable.Record {
                            "start": 0,
                            "end": 0,
                            "decoratorKey": null,
                            "leaves": Immutable.List [
                              Immutable.Record {
                                "start": 0,
                                "end": 0,
                              },
                            ],
                          },
                        ],
                      },
                      "undoStack": Immutable.Stack [],
                    },
                  }
                }
                key="contents0"
              >
                <div
                  data-contents="true"
                >
                  <div
                    className={null}
                    data-block={true}
                    data-editor="70k8e"
                    data-offset-key="a6ase-0-0"
                    key="a6ase"
                  >
                    <DraftEditorBlock
                      block={
                        Immutable.Record {
                          "key": "a6ase",
                          "type": "unstyled",
                          "text": "",
                          "characterList": Immutable.List [],
                          "depth": 0,
                          "data": Immutable.Map {},
                        }
                      }
                      blockStyleFn={[Function]}
                      contentState={
                        Immutable.Record {
                          "entityMap": Object {
                            "__add": [Function],
                            "__create": [Function],
                            "__get": [Function],
                            "__getLastCreatedEntityKey": [Function],
                            "__mergeData": [Function],
                            "__replaceData": [Function],
                            "add": [Function],
                            "create": [Function],
                            "get": [Function],
                            "getLastCreatedEntityKey": [Function],
                            "mergeData": [Function],
                            "replaceData": [Function],
                          },
                          "blockMap": Immutable.OrderedMap {
                            "a6ase": Immutable.Record {
                              "key": "a6ase",
                              "type": "unstyled",
                              "text": "",
                              "characterList": Immutable.List [],
                              "depth": 0,
                              "data": Immutable.Map {},
                            },
                          },
                          "selectionBefore": Immutable.Record {
                            "anchorKey": "a6ase",
                            "anchorOffset": 0,
                            "focusKey": "a6ase",
                            "focusOffset": 0,
                            "isBackward": false,
                            "hasFocus": false,
                          },
                          "selectionAfter": Immutable.Record {
                            "anchorKey": "a6ase",
                            "anchorOffset": 0,
                            "focusKey": "a6ase",
                            "focusOffset": 0,
                            "isBackward": false,
                            "hasFocus": false,
                          },
                        }
                      }
                      customStyleMap={
                        Object {
                          "BOLD": Object {
                            "fontWeight": "bold",
                          },
                          "CODE": Object {
                            "fontFamily": "monospace",
                            "wordWrap": "break-word",
                          },
                          "ITALIC": Object {
                            "fontStyle": "italic",
                          },
                          "STRIKETHROUGH": Object {
                            "textDecoration": "line-through",
                          },
                          "UNDERLINE": Object {
                            "textDecoration": "underline",
                          },
                        }
                      }
                      decorator={null}
                      direction="LTR"
                      forceSelection={false}
                      key="a6ase"
                      offsetKey="a6ase-0-0"
                      selection={
                        Immutable.Record {
                          "anchorKey": "a6ase",
                          "anchorOffset": 0,
                          "focusKey": "a6ase",
                          "focusOffset": 0,
                          "isBackward": false,
                          "hasFocus": false,
                        }
                      }
                      tree={
                        Immutable.List [
                          Immutable.Record {
                            "start": 0,
                            "end": 0,
                            "decoratorKey": null,
                            "leaves": Immutable.List [
                              Immutable.Record {
                                "start": 0,
                                "end": 0,
                              },
                            ],
                          },
                        ]
                      }
                    >
                      <div
                        className="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"
                        data-offset-key="a6ase-0-0"
                      >
                        <DraftEditorLeaf
                          block={
                            Immutable.Record {
                              "key": "a6ase",
                              "type": "unstyled",
                              "text": "",
                              "characterList": Immutable.List [],
                              "depth": 0,
                              "data": Immutable.Map {},
                            }
                          }
                          customStyleMap={
                            Object {
                              "BOLD": Object {
                                "fontWeight": "bold",
                              },
                              "CODE": Object {
                                "fontFamily": "monospace",
                                "wordWrap": "break-word",
                              },
                              "ITALIC": Object {
                                "fontStyle": "italic",
                              },
                              "STRIKETHROUGH": Object {
                                "textDecoration": "line-through",
                              },
                              "UNDERLINE": Object {
                                "textDecoration": "underline",
                              },
                            }
                          }
                          forceSelection={false}
                          isLast={true}
                          key="a6ase-0-0"
                          offsetKey="a6ase-0-0"
                          selection={
                            Immutable.Record {
                              "anchorKey": "a6ase",
                              "anchorOffset": 0,
                              "focusKey": "a6ase",
                              "focusOffset": 0,
                              "isBackward": false,
                              "hasFocus": false,
                            }
                          }
                          start={0}
                          styleSet={Immutable.OrderedSet []}
                          text=""
                        >
                          <span
                            data-offset-key="a6ase-0-0"
                            style={Object {}}
                          >
                            <DraftEditorTextNode>
                              <br
                                data-text="true"
                                key="B"
                              />
                            </DraftEditorTextNode>
                          </span>
                        </DraftEditorLeaf>
                      </div>
                    </DraftEditorBlock>
                  </div>
                </div>
              </DraftEditorContents>
            </div>
          </div>
        </div>
      </DraftEditor>
      <ProfileComponent
        comment={
          Immutable.Record {
            "entityMap": Object {
              "__add": [Function],
              "__create": [Function],
              "__get": [Function],
              "__getLastCreatedEntityKey": [Function],
              "__mergeData": [Function],
              "__replaceData": [Function],
              "add": [Function],
              "create": [Function],
              "get": [Function],
              "getLastCreatedEntityKey": [Function],
              "mergeData": [Function],
              "replaceData": [Function],
            },
            "blockMap": Immutable.OrderedMap {
              "a6ase": Immutable.Record {
                "key": "a6ase",
                "type": "unstyled",
                "text": "",
                "characterList": Immutable.List [],
                "depth": 0,
                "data": Immutable.Map {},
              },
            },
            "selectionBefore": Immutable.Record {
              "anchorKey": "a6ase",
              "anchorOffset": 0,
              "focusKey": "a6ase",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
            "selectionAfter": Immutable.Record {
              "anchorKey": "a6ase",
              "anchorOffset": 0,
              "focusKey": "a6ase",
              "focusOffset": 0,
              "isBackward": false,
              "hasFocus": false,
            },
          }
        }
        disabled={true}
        parentId={null}
      />
    </div>
  </div>
</CommentEditor>
`;
