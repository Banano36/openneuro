// Based on plugin by Marcell Endrey - https://github.com/endreymarcell/esbuild-plugin-webworker
import path from 'path'
import * as esbuild from 'esbuild'
import GlobalsPlugin from 'esbuild-plugin-globals'

export const webWorkerPlugin = () => ({
  name: 'webWorker',
  setup(build) {
    build.onResolve({ filter: /\.worker$/ }, args => {
      console.debug(
        `The web worker plugin matched an import to ${args.path} from ${args.importer}`,
      )
      return {
        // This is a hack to pass the importer path to the onLoad handler
        path: args.importer + '::' + args.path,
        namespace: 'webWorker',
      }
    })
    build.onLoad({ filter: /.*/, namespace: 'webWorker' }, async args => {
      const pathSegments = /^(.*)::(.*)$/.exec(args.path)
      const [_, importer, importPath] = pathSegments

      const workerWithFullPath = path.join(path.dirname(importer), importPath)
      const workerFileName = path.basename(workerWithFullPath)

      // You only need this for TypeScript
      // because the import will refer to a .ts file
      // but the web worker will need to point to a .js file
      const outFileName = `${workerFileName}.js`

      // This one depends on your file structure
      const outFileWithRelativePath = path.join('public', outFileName)

      try {
        await esbuild.build({
          entryPoints: [workerWithFullPath],
          outfile: outFileWithRelativePath,
          minify: true,
          bundle: true,
          sourcemap: true,
          // Ugly hacks for bids-validator
          define: {
            global: 'globalThis',
            window: 'globalThis',
            crypto: 'globalThis',
            os: 'globalThis',
            timers: 'globalThis',
            process: JSON.stringify({
              env: {},
              argv: [],
              stdout: '',
              stderr: '',
              stdin: '',
            }),
          },
          plugins: [
            GlobalsPlugin({
              crypto: 'globalThis',
              os: 'globalThis',
              timers: 'globalThis',
              process: 'globalThis',
              zlib: 'globalThis',
            }),
          ],
        })
        return {
          contents: `
// This file is generated by esbuild to expose the worker script as a class, like Webpack's worker-loader
export default class {
    constructor() {
        // This path depends on how you serve your files
        return new Worker('/${outFileName}');
    }
}
`,
        }
      } catch (e) {
        console.error('Could not build worker script:', e)
      }
    })
  },
})
