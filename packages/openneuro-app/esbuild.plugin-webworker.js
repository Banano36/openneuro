// Plugin by Marcell Endrey - https://github.com/endreymarcell/esbuild-plugin-webworker
// This plugin lets you use web worker scripts the same way you do with Webpack's worker-loader.
import path from 'path'
import * as esbuild from 'esbuild'

export const webWorkerPlugin = () => ({
  name: 'webWorker',
  setup(build) {
    build.onResolve({ filter: /\.worker$/ }, args => {
      console.debug(
        `The web worker plugin matched an import to ${args.path} from ${args.importer}`,
      )
      return {
        // This is a hack to pass the importer path to the onLoad handler
        path: args.importer + '::' + args.path,
        namespace: 'webWorker',
      }
    })
    build.onLoad({ filter: /.*/, namespace: 'webWorker' }, async args => {
      const pathSegments = /^(.*)::(.*)$/.exec(args.path)
      const [_, importer, importPath] = pathSegments

      const workerWithFullPath = path.join(path.dirname(importer), importPath)
      const workerFileName = path.basename(workerWithFullPath)

      // You only need this for TypeScript
      // because the import will refer to a .ts file
      // but the web worker will need to point to a .js file
      const outFileName = `${workerFileName}.js`

      // This one depends on your file structure
      const outFileWithRelativePath = path.join('dist', outFileName)

      try {
        await esbuild.build({
          entryPoints: [workerWithFullPath],
          outfile: outFileWithRelativePath,
          minify: true,
          bundle: true,
          external: ['os', 'zlib', 'crypto', 'timers'], // Node modules used by bids-validator
          define: {
            global: 'globalThis',
            window: 'globalThis',
          },
          sourcemap: 'inline',
        })
        return {
          contents: `
// This file is generated by esbuild to expose the worker script as a class, like Webpack's worker-loader
export default class {
    constructor() {
        // This path depends on how you serve your files
        return new Worker('/${outFileName}');
    }
}
`,
        }
      } catch (e) {
        console.error('Could not build worker script:', e)
      }
    })
  },
})
